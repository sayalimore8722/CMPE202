package com.codebind;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.BodyDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.EnumDeclaration;
import com.github.javaparser.ast.body.FieldDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;

public class UmlParser {
	public static ArrayList<String> relation=new ArrayList<String>();
	public static ArrayList<String> variables=new ArrayList<String>();
	private static int relvariable = 0;
	public static void main(String[] args) throws Exception {
      
        String srcfolder="D:\\umlparser\\uml-parser-test-3";
		File folder=new File(srcfolder);
	
		 PrintWriter writer = new PrintWriter("D:\\Uml.txt", "UTF-8") ;
		 PrintWriter grammerWriter=new PrintWriter("D:\\grammer.txt","UTF-8");
		 writer.println("@startuml ");
		 writer.println("skinparam classAttributeIconSize 0");
		for(File fileobj:folder.listFiles())
		{
			if(fileobj.getName().endsWith(".java"))
			{
				System.out.println("Processing File----->> "+fileobj.getName());
				FileInputStream in=new FileInputStream(fileobj);
				 CompilationUnit cu = JavaParser.parse(in);
	           	 String src=classParser(cu,writer);
				 String rel_str=variableParser(cu,writer,src);
				 String dependency=methodParser(cu,writer,src);
				 writer.println("}");
				 writer.println(rel_str);
				 writer.println(dependency);
			}
		}
        
		writer.println("@enduml");
		writer.close();
		
    }

	
	public static String classParser(CompilationUnit cu,PrintWriter writer)
	{
		int b=0;
		String srcClass=null;
		HashMap<String,Object> classDeclarInfo=new HashMap<String,Object>();
		HashMap<String,String> classorinterface=new HashMap<String,String>();
			
	
			
		for (TypeDeclaration types : cu.getTypes()) {
            if(types instanceof ClassOrInterfaceDeclaration)
            {
            	
            	int a=types.getModifiers();
            	if(a==1)
            		classorinterface.put("Access","public");
            		
            	if(a==2)
            		classorinterface.put("Access","private");
            		
            	if(((ClassOrInterfaceDeclaration)types).isInterface())
            	{
            		classorinterface.put("ClassOrInterface","interface");
            		b=2;
            	}
            	else if(!((ClassOrInterfaceDeclaration)types).isInterface())
            	{
            		classorinterface.put("ClassOrInterface","class");
            		b=1;
            	}
            	
            	classDeclarInfo.put("Name",((ClassOrInterfaceDeclaration)types).getName());
            	classDeclarInfo.put("Extended",(((ClassOrInterfaceDeclaration)types).getExtends()));
            	classDeclarInfo.put("Implements",((ClassOrInterfaceDeclaration)types).getImplements());
            	srcClass=((ClassOrInterfaceDeclaration)types).getName();
            	
            	//File Implements and Extends logic
            	
            	if(((ClassOrInterfaceDeclaration)types).getExtends() != null)
            	{
            	writer.print((((((ClassOrInterfaceDeclaration)types).getExtends()).toString()).replace("[","")).replace("]",""));
            	writer.print(" <|-- ");
            	writer.println(classDeclarInfo.get("Name"));
            	}
            	
            	
            	if(((ClassOrInterfaceDeclaration)types).getImplements() != null)
            	{
            	int size=(((ClassOrInterfaceDeclaration)types).getImplements()).size();
            	
            	for(int i=0;i<size;i++)
            	{
            	writer.print((((((((ClassOrInterfaceDeclaration)types).getImplements()).get(i)).toString()).replace("[","")).replace("]","")));
            	writer.print(" <|.. ");
            	writer.println(classDeclarInfo.get("Name"));
            	}
            	}
            	
            	if(b==1)
            	{
            		writer.print("class ");
            		writer.print(classDeclarInfo.get("Name"));
                	writer.println("{");
                }	
            	if(b==2)
            	{
            		writer.print("interface ");
            		writer.print(classDeclarInfo.get("Name"));
                	writer.println("{");
            	}
            	ClassOrInterfaceDeclaration classv=(ClassOrInterfaceDeclaration)types;
            	List<BodyDeclaration> list1=classv.getMembers();
            	
            }
        }
		return srcClass;
	}
	
	public static String variableParser(CompilationUnit cu,PrintWriter writer,String src)
	{
		ArrayList<String> mname=new ArrayList<String>();
		String destClass="";
		String relation_str="";
		String forArray="",forArray1="";
		String collect_relation_str="",instance_relation_str="";
		boolean getflag=false,setflag=false;
		int flag=0;
		HashMap<String,String> variabledec=new HashMap<String,String>();
		HashMap<String,Object> variabletype=new HashMap<String,Object>();
		
		
		for (TypeDeclaration types : cu.getTypes()) {
			if(types instanceof ClassOrInterfaceDeclaration)
            {
				
            	ClassOrInterfaceDeclaration classv=(ClassOrInterfaceDeclaration)types;
            	List<BodyDeclaration> list1=classv.getMembers();
            	for(BodyDeclaration bvar:list1)
            	{
            		if(bvar instanceof MethodDeclaration)
            		{
            			mname.add(((MethodDeclaration)bvar).getName());
            			
            		}
            	}
            	for(BodyDeclaration bvar:list1)
            	{
            		
            		if(bvar instanceof FieldDeclaration)
            		{
            			String access="";
            			//Get Variable Access Specifier
            			int a=((FieldDeclaration) bvar).getModifiers();
            			
                       	//Get Variable Type
                    	variabletype.put("VariableType",((FieldDeclaration) bvar).getType());
                    	Type ftype=((FieldDeclaration)bvar).getType();
                    	FieldDeclaration var=(FieldDeclaration)bvar;
                    	List<VariableDeclarator> varlist=var.getVariables();
                    	
                    	for(VariableDeclarator vvar:varlist)
                    	{
                    		destClass=(((FieldDeclaration) bvar).getType()).toString();
                    		if((vvar instanceof VariableDeclarator && !(ftype instanceof ReferenceType)) || ftype.toString().contains("[]") || ftype.toString().contains("String"))
                    		{
                    			if(a==1)
                    			{
                            		variabledec.put("VariableAccess","public");
                    				writer.print("+");
                    				access="public";
                    				variabletype.put("VariableName",((VariableDeclarator)vvar).getId());
                        			writer.print(((VariableDeclarator)vvar).getId());
                        			writer.print(":");
                        			writer.println(((FieldDeclaration) bvar).getType());
                    			}
                    			else if(a==2)
                    			{
                    				variabledec.put("VariableAccess","private");
                            		
                            		access="private";
                            		System.out.println("Hello1");
                            		System.out.println((((VariableDeclarator)vvar).getId()));
                            		String get="get"+(((VariableDeclarator)vvar).getId());
                        			String set="set"+(((VariableDeclarator)vvar).getId());
                        			System.out.println(get+"--------------"+set);
                        			
                        			for(String mname1:mname)
                            		{
                        				System.out.println("Lowercase"+(mname1.toLowerCase()));
                        				String lower=(mname1.toLowerCase());
                            		 if(get.compareToIgnoreCase(mname1)==0)
                            		 {
                            		     System.out.println("get");
                            		     getflag=true;
                            		 }
                            		 else
                            		 {
                            			  System.out.println("notget");
                            		 }
                            		}
                        			for(String mname1:mname)
                            		{
                        				System.out.println("Lowercase"+(mname1.toLowerCase()));
                        				String lower=(mname1.toLowerCase());
                        				if(set.compareToIgnoreCase(mname1)==0)
                               		 {
                            			 System.out.println("set");
                            			 setflag=true;
                            		 }
                               		else
                               		{
                           			  System.out.println("notset");
                               		}

                            		}
                        			
                        			if(getflag && setflag)
                        			{
                        				System.out.println("In both set get");
                        				writer.print("+");
                        				variabletype.put("VariableName",((VariableDeclarator)vvar).getId());
                            			writer.print(((VariableDeclarator)vvar).getId());
                            			writer.print(":");
                            			writer.println(((FieldDeclaration) bvar).getType());
                            			getflag=false;
                            			setflag=false;
                        			}
                        			
                        			
                    			}
                    			
                    			access=access+" "+((FieldDeclaration) bvar).getType()+" "+((VariableDeclarator)vvar).getId();
                    			System.out.println("Access----------------"+access);
                    			variables.add(access);
                    			for(String s:variables)
                    			{
                    				System.out.println("List-------"+s);
                    			}
                
                    		}
                    		else if(ftype instanceof ReferenceType)
                        	{
                        		String str=ftype.toString();
                        		
                        		if (((ReferenceType) ftype).getType() instanceof ClassOrInterfaceType)
                        		{
                        			
                        			if(str.contains("Collection"))
                            		{
                            			
                                		String str1=str.replace("Collection<","");
                                		String str2=str1.replace(">","");
                                	 
                                		collect_relation_str+=src+" "+"\"1\""+"--"+" \"many\" "+str2+System.lineSeparator();
                                		System.out.println(collect_relation_str);
                                		forArray=src+str2;
                                		forArray1=str2+src;
                                		System.out.println(forArray);
                                		System.out.println(forArray1);
                                		
                            		}
                        			else
                        			{
                        				collect_relation_str+=src+" "+"\"1\""+"--"+"\"1\" "+destClass+System.lineSeparator();
                        				System.out.println(collect_relation_str);
                        				forArray=src+destClass;
                        				forArray1=destClass+src;
                        				System.out.println(forArray);
                                		System.out.println(forArray1);
                                			
                        			}
                        			if(!(relation.contains(forArray)) || !(relation.contains(forArray1)))
                        			{
                        				relation_str=collect_relation_str;
                        			}
                        			
                        			relation.add(forArray);
                        			relation.add(forArray1);
                        			
                        		}
                        	}
                    	} 	
                    }
            	}    	
		}
		}
		return relation_str;
		
}
	public static String methodParser(CompilationUnit cu,PrintWriter writer,String src)
	{
		HashMap<String,String> methoddec=new HashMap<String,String>();
		HashMap<String,Object> methodtype=new HashMap<String,Object>();
		String dependency="";
		
		for (TypeDeclaration types : cu.getTypes()) {
			if(types instanceof ClassOrInterfaceDeclaration)
            {
				ClassOrInterfaceDeclaration classv=(ClassOrInterfaceDeclaration)types;

				List<BodyDeclaration> list1=classv.getMembers();
            	for(BodyDeclaration bvar:list1)
            	{
            		
            		if(bvar instanceof MethodDeclaration)
            		{
            		int a=((MethodDeclaration)bvar).getModifiers();
            		String mname=((MethodDeclaration)bvar).getName();
            		if(a==1 && !mname.contains("get") && !mname.contains("set"))
            		{
                		methoddec.put("MethodAccess","public");
            			writer.print("+ ");
            		}
          
            		else if(a==2 && !mname.contains("get") && !mname.contains("set"))
            		{
                		methoddec.put("MethodAccess","private");
                		writer.print("- ");
            		}
            		methodtype.put("MethodType",((MethodDeclaration)bvar).getType());
            		
            		
                	methoddec.put("MethodName",((MethodDeclaration)bvar).getName());
                	
                	
                	if(!mname.equals("main") && !mname.contains("get") && !mname.contains("set"))
                	{
                	writer.print(((MethodDeclaration)bvar).getType());
                	writer.print(" ");
                	writer.print(mname);
    				writer.print("(");
    				methodtype.put("MethodParameters",((MethodDeclaration)bvar).getParameters());
    				List<Parameter> methodpara=((MethodDeclaration)bvar).getParameters();
    				writer.print(((MethodDeclaration)bvar).getParameters().toString().replace(" ",":").replace("[","").replace("]",""));
    				writer.println(")");
    				for(Parameter para:methodpara)
    				{
    					
    					Type parav=para.getType();
    					if(parav instanceof ReferenceType && !(parav.toString().contains("String")))
    					{
    						
    						if(((ReferenceType) parav).getType() instanceof ClassOrInterfaceType)
    						{
    							
    							dependency=src+"\"uses\" ..>"+para.getType();
    						}
    					}
    				}
                	}
    				
            		}
            	}
            }
		}
		return dependency;
			
	}
	
	
}



	

