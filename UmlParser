package com.codebind;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.BodyDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.FieldDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;

public class UmlParser {
	public static void main(String[] args) throws Exception {
        
        String srcfolder="D:\\umlparser\\uml-parser-test-1";
		File folder=new File(srcfolder);
		
		 PrintWriter writer = new PrintWriter("D:\\Uml.txt", "UTF-8") ;
		 PrintWriter grammerWriter=new PrintWriter("D:\\grammer.txt","UTF-8");
		 writer.println("@startuml ");
		for(File fileobj:folder.listFiles())
		{
			if(fileobj.getName().endsWith(".java"))
			{
				System.out.println("Processing File----->> "+fileobj.getName());
				FileInputStream in=new FileInputStream(fileobj);
				 CompilationUnit cu = JavaParser.parse(in);
	           	 String src=classParser(cu,writer);
				 
				 variableParser(cu,writer,src);
				 methodParser(cu,writer);
				 writer.println("}");
				 
				 
			}
		}
        
		writer.println("@enduml");
		 writer.close();
		
    }

	
	public static String classParser(CompilationUnit cu,PrintWriter writer)
	{
		int b=0;
		String srcClass=null;
		HashMap<String,Object> classDeclarInfo=new HashMap<String,Object>();
		HashMap<String,String> classorinterface=new HashMap<String,String>();
			
	
			
		for (TypeDeclaration types : cu.getTypes()) {
            if(types instanceof ClassOrInterfaceDeclaration)
            {
            	
            	int a=types.getModifiers();
            	if(a==1)
            		classorinterface.put("Access","public");
            		
            	if(a==2)
            		classorinterface.put("Access","private");
            		
            	if(((ClassOrInterfaceDeclaration)types).isInterface())
            	{
            		classorinterface.put("ClassOrInterface","interface");
            		b=2;
            	}
            	else if(!((ClassOrInterfaceDeclaration)types).isInterface())
            	{
            		classorinterface.put("ClassOrInterface","class");
            		b=1;
            	}
            	
            	classDeclarInfo.put("Name",((ClassOrInterfaceDeclaration)types).getName());
            	classDeclarInfo.put("Extended",(((ClassOrInterfaceDeclaration)types).getExtends()));
            	classDeclarInfo.put("Implements",((ClassOrInterfaceDeclaration)types).getImplements());
            	srcClass=((ClassOrInterfaceDeclaration)types).getName();
            	
            	//File Implements and Extends logic
            	
            	if(((ClassOrInterfaceDeclaration)types).getExtends() != null)
            	{
            	writer.print((((((ClassOrInterfaceDeclaration)types).getExtends()).toString()).replace("[","")).replace("]",""));
            	writer.print(" <|-- ");
            	writer.println(classDeclarInfo.get("Name"));
            	}
            	
            	
            	if(((ClassOrInterfaceDeclaration)types).getImplements() != null)
            	{
            	int size=(((ClassOrInterfaceDeclaration)types).getImplements()).size();
            	
            	for(int i=0;i<size;i++)
            	{
            	writer.print((((((((ClassOrInterfaceDeclaration)types).getImplements()).get(i)).toString()).replace("[","")).replace("]","")));
            	writer.print(" <|.. ");
            	writer.println(classDeclarInfo.get("Name"));
            	}
            	}
            	
            	if(b==1)
            	{
            		writer.print("class ");
            		writer.print(classDeclarInfo.get("Name"));
                	writer.println("{");
                }	
            	if(b==2)
            	{
            		writer.print("interface ");
            		writer.print(classDeclarInfo.get("Name"));
                	writer.println("{");
            	}
            }
        }
		return srcClass;
	}
	
	public static void variableParser(CompilationUnit cu,PrintWriter writer,String src)
	{
		String destClass=null;
		HashMap<String,String> variabledec=new HashMap<String,String>();
	
		HashMap<String,Object> variabletype=new HashMap<String,Object>();
		for (TypeDeclaration types : cu.getTypes()) {
			if(types instanceof ClassOrInterfaceDeclaration)
            {
            	ClassOrInterfaceDeclaration classv=(ClassOrInterfaceDeclaration)types;
            	List<BodyDeclaration> list1=classv.getMembers();
            	for(BodyDeclaration bvar:list1)
            	{
            		if(bvar instanceof FieldDeclaration)
            		{
            			//Get Variable Access Specifier
            			int a=((FieldDeclaration) bvar).getModifiers();
            			
            			if(a==1)
            			{
                    		variabledec.put("VariableAccess","public");
            				writer.print("+");
            			}
            			else if(a==2)
            			{
            				variabledec.put("VariableAccess","private");
                    		writer.print("- ");
            			}
                       	//Get Variable Type
                    	variabletype.put("VariableType",((FieldDeclaration) bvar).getType());
                    	Type ftype=((FieldDeclaration)bvar).getType();
                    	FieldDeclaration var=(FieldDeclaration)bvar;
                    	List<VariableDeclarator> varlist=var.getVariables();
                    	
                    	for(VariableDeclarator vvar:varlist)
                    	{
                    		destClass=(((FieldDeclaration) bvar).getType()).toString();
                    		if((vvar instanceof VariableDeclarator && !(ftype instanceof ReferenceType)) || ftype.toString().contains("[]"))
                    		{
                    			variabletype.put("VariableName",((VariableDeclarator)vvar).getId());
                    			writer.print(((VariableDeclarator)vvar).getId());
                    			writer.print(":");
                    			writer.println(((FieldDeclaration) bvar).getType());
                    		}
                    		else if(ftype instanceof ReferenceType)
                        	{
                        		String str=ftype.toString();
                        		
                        		if (((ReferenceType) ftype).getType() instanceof ClassOrInterfaceType)
                        		{
                        			if(str.contains("Collection"))
                            		{
                            			
                                		String str1=str.replace("Collection<","");
                                		String str2=str1.replace(">","");
                                		writer.println(src+" "+"\"1\""+"--"+" \"many\" "+str2);
                                		
                            		}
                        			else
                        			{
                        				
                        				writer.println(src+" "+"\"1\""+"--"+"\"1\" "+destClass);
                        			}
                        			
                        			
                        		}
                        	}
                    	} 	
                    }
            	}    	
            }
		}
		
}
	public static void methodParser(CompilationUnit cu,PrintWriter writer)
	{
		HashMap<String,String> methoddec=new HashMap<String,String>();
		HashMap<String,Object> methodtype=new HashMap<String,Object>();
		
		for (TypeDeclaration types : cu.getTypes()) {
			if(types instanceof ClassOrInterfaceDeclaration)
            {
				ClassOrInterfaceDeclaration classv=(ClassOrInterfaceDeclaration)types;

				List<BodyDeclaration> list1=classv.getMembers();
            	for(BodyDeclaration bvar:list1)
            	{
            		if(bvar instanceof MethodDeclaration)
            		{
            		int a=((MethodDeclaration)bvar).getModifiers();
            		if(a==1)
            		{
                		methoddec.put("MethodAccess","public");
            			writer.print("+ ");
            		}
          
            		else if(a==2)
            		{
                		methoddec.put("MethodAccess","private");
                		writer.print("- ");
            		}
            		methodtype.put("MethodType",((MethodDeclaration)bvar).getType());
            		
            		
                	methoddec.put("MethodName",((MethodDeclaration)bvar).getName());
                	String mname=((MethodDeclaration)bvar).getName();
                	
                	if(!mname.equals("main"))
                	{
                	writer.print(((MethodDeclaration)bvar).getType());
                	writer.print(" ");
                	writer.print(mname);
    				writer.println("()");
    				methodtype.put("MethodParameters",((MethodDeclaration)bvar).getParameters());
                	}
    				
            		}
            	}
            }
		}
		
		
	}
	
}
	
	

